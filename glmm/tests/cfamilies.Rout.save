
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(glmm)
Loading required package: trust
Loading required package: mvtnorm
Loading required package: Matrix
Loading required package: parallel
Loading required package: doParallel
Loading required package: foreach
Loading required package: iterators
> 
> #First, define checks for bernoulli
> cum <- function(eta){ 
+ 	if(eta>0) eta+log1p(exp(-eta))
+ 	else log1p(exp(eta))}
> cum<-Vectorize(cum)
> cp <- function(eta) {1/(1+exp(-eta))}
> cpp<-function(eta) {(1/(1+exp(-eta)))*(1/(1+exp(eta)))}
> 
> 
> #check cum3 for a vector containing both positive and negative values of eta
> eta<-seq(-1,1,.1)
> neta<-length(eta)
> wts<-rep(1,neta)
> that<-.C(glmm:::C_cum3,eta=as.double(eta),neta=as.integer(neta), type=as.integer(1), ntrials=as.integer(1), wts=as.double(wts),cumout=double(1))
> all.equal(sum(cum(eta)),that$cumout)
[1] TRUE
> 
> #check cp3
> that<-.C(glmm:::C_cp3,eta=as.double(eta),neta=as.integer(neta),type=as.integer(1), ntrials=as.integer(1), cpout=double(neta))
> all.equal(cp(eta),that$cpout)
[1] TRUE
> 
> #check cpp3
> that<-.C(glmm:::C_cpp3,eta=as.double(eta),neta=as.integer(neta),type=as.integer(1), ntrials=as.integer(1), cppout=double(neta))
> all.equal(cpp(eta),that$cppout)
[1] TRUE
> 
> ######################
> #now move onto Poisson
> cum <- function(eta) exp(eta)
> cp <- function(eta) exp(eta)
> cpp<-function(eta) exp(eta)
> eta<-c(4.5,5,5.5)
> neta<-length(eta)
> wts<-rep(1,neta)
> 
> #check cum3
> that<-.C(glmm:::C_cum3,eta=as.double(eta),neta=as.integer(neta),type=as.integer(2), ntrials=as.integer(1),wts=as.double(wts), cumout=double(1))
> all.equal(sum(cum(eta)),that$cumout)
[1] TRUE
> 
> #check cp3
> that<-.C(glmm:::C_cp3,eta=as.double(eta),neta=as.integer(neta),type=as.integer(2), ntrials=as.integer(1), cpout=double(neta))
> all.equal(cp(eta),that$cpout)
[1] TRUE
> 
> #check cpp3
> that<-.C(glmm:::C_cpp3,eta=as.double(eta),neta=as.integer(neta),type=as.integer(2), ntrials=as.integer(1), cppout=double(neta))
> all.equal(cpp(eta),that$cppout)
[1] TRUE
> 
> 
> proc.time()
   user  system elapsed 
  1.413   0.140   1.558 
